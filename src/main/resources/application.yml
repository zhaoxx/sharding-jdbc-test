spring:
  shardingsphere:
    datasource:
      ds-0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/sharding_test_01?serverTimezone=CTT&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
      ds-1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/sharding_test_02?serverTimezone=CTT&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
#      ds-slave-0:
#        type: com.zaxxer.hikari.HikariDataSource
#        driver-class-name: com.mysql.jdbc.Driver
#        jdbc-url: jdbc:mysql://localhost:3306/sharding_test_01_slave?serverTimezone=CTT&useSSL=false&useUnicode=true&characterEncoding=UTF-8
#        username: root
#        password: 123456
#      ds-slave-1:
#        type: com.zaxxer.hikari.HikariDataSource
#        driver-class-name: com.mysql.jdbc.Driver
#        jdbc-url: jdbc:mysql://localhost:3306/sharding_test_02_slave?serverTimezone=CTT&useSSL=false&useUnicode=true&characterEncoding=UTF-8
#        username: root
#        password: 123456
      names: ds-0,ds-1
#      readwrite_ds:
#        writeDataSourceName: write_ds
#        readDataSourceNames:
#          - read_ds_0
#          - read_ds_1
#        transactionalReadQueryStrategy: PRIMARY
#        loadBalancerName: random
#    loadBalancers:
#      random:
#        type: RANDOM
    rules:
      sharding:
        binding-tables: # 绑定表
          - t_order,t_order_item
        broadcast-tables: t_address #广播规则表
        default-database-strategy:
          standard:
            sharding-algorithm-name: database-inline
            sharding-column: buyer_id
        key-generators:
          snowflake:
            type: SNOWFLAKE
        sharding-algorithms:
          database-inline:
            props:
              algorithm-expression: ds-$->{buyer_id % 2}
            type: INLINE
          t-order-inline:
            type: INLINE
            props:
              algorithm-expression: t_order_$->{order_id % 2}
          t-order-item-inline:
            type: INLINE
            props:
              algorithm-expression: t_order_item_$->{order_id % 2}
        tables:
          t_order:
            actual-data-nodes: ds-$->{0..1}.t_order_$->{0..1}
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: t-order-inline
            key-generate-strategy:
              column: order_id
              key-generator-name: snowflake
          t_order_item:
            actual-data-nodes: ds-$->{0..1}.t_order_item_$->{0..1}
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: t-order-item-inline
            key-generate-strategy:
              column: order_item_id
              key-generator-name: snowflake


# mybatis 配置内容
mybatis:
  config-location: classpath:mybatis-config.xml # 配置 MyBatis 配置文件路径
  mapper-locations: classpath:mapper/*.xml # 配置 Mapper XML 地址
  type-aliases-package: com.epec.model # 配置数据库实体包路径